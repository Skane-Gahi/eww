; Imports
(include "widgets/workspaces.yuck")

; Variables
(defpoll hour :interval "1s" :initial "00" `date +%H`)
(defpoll minute :interval "1s" :initial "00" `date +%M`)

(defwindow bar
  :monitor 0
  :geometry (geometry 
    :height "100%"
    :anchor "left center"
  )
  :stacking "fg"
  :exclusive true
  (centerbox
    :class "container"
    :orientation "v"
    (top-bar)
    (center-bar)
    (bottom-bar)
  )
)

(defwidget top-bar []
  (box
    :valign "start"
    :orientation "v"
    :space-evenly false
    (image
      :path "assets/arch-logo-dark.svg"
      :image-width 25
    )
    "--"
    (workspaces)
  )
)

(defwidget center-bar []
  (box
    :valign "center"
    :orientation "v"
    :space-evenly false
    ">"
  )
)

(defwidget bottom-bar []
  (box
    :valign "end"
    :orientation "v"
    :space-evenly false
    :spacing 10
    (vertical-monitor)
    "--"
    (battery :value {EWW_BATTERY.total_avg})
    (vertical-time)
  )
)

(defwidget vertical-time []
  (box
   :class "vertical"
   :orientation "v"
   :space-evenly false
   "${hour}"
   "${minute}"
  )
)

(defwidget battery [value]
  (box
    :spacing 0
    :orientation "v"
    :space-evenly false
    (box
      :class "battery-toping"
      :halign "center"
      :height 3
      :width 10
    )
    (box
      :class "outer-battery"
      :halign "center"
      :height 24
      (box
        :class "inner-battery"
        :valign "end"
        :height {round(value / 100 * 20, 0)}
        :width 15
      )
    )
  )
)

(defwidget vertical-monitor []
  (box
    :orientation "v"
    :spacing 10
    :space-evenly false
    (circular-monitor
      :type "ram"
      :value {EWW_RAM.used_mem_perc}
    )
    (circular-monitor
      :type "cpu"
      :value {EWW_CPU.avg}
    )
  )
)

(defwidget circular-monitor [type value]
  (box
    :class "circular-monitor"
    (circular-progress
      :class "outer-circle outer-${type}"
      :value {value}
      :start-at 25
      :thickness 5
      (box
        :class "middle-circle middle-${type}"
        (box
          :class "inner-circle inner-${type}"
          "Need text otherwise circular progress does not work"
        )
      )
    )
  )
)